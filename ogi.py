# -*- coding: utf-8 -*-
"""OGI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IvPcca5tX7Hmnoj9KWvLZdSzJXs1t05p
"""

# Description: DEMA trading strategy using buy and sell signals 
import pandas as pd # data analysis 
import numpy as np # arrays
import matplotlib.pyplot as plt # plotting
plt.style.use('fivethirtyeight') # graph style

from google.colab import files # importing files via Google Colab 
files.upload()

OGI = pd.read_csv('AMZN.csv') # read CSV file and add to OGI data frame 
OGI = OGI.set_index(pd.DatetimeIndex(OGI['Date'].values)) # set first column to date time 
OGI # show data

def OGI_DEMA(data, time_period, column): # function for finding the DEMA 
  OGI_EMA = data[column].ewm(span=time_period, adjust=False).mean() # EMA of data 
  OGI_DEMA = 2 * OGI_EMA - OGI_EMA.ewm(span=time_period, adjust=False).mean() # DEMA of data 

  return OGI_DEMA # return the function

OGI['DEMA-Short'] = OGI_DEMA(OGI, 20, 'Close') # add DEMA short to the dataset 
OGI['DEMA-Long'] = OGI_DEMA(OGI, 50, 'Close') # add DEMA long to the dataset

column_list = ['DEMA-Short', 'DEMA-Long', 'Close'] # column list for plotting graph 
OGI[column_list].plot(figsize=(20, 7)) # plots and figure size 
plt.title('Close Price of OrganiGram') # title 
plt.ylabel('Price ($)') # x label (horizontal)
plt.xlabel('Date') # y label (vertical)
plt.show() # show graph

def DEMA_function(data): # buy and sell function
  buy_list = [] # empty list 
  sell_list = []
  flag = False # flag 
  for i in range(0, 247): # must equal amount of rows 
    if data['DEMA-Short'][i] > data['DEMA-Long'][i] and flag == False: # if DEMA short is greater than DEMA long then add a Buy signal 
      buy_list.append(data['Close'][i])
      sell_list.append(np.nan)
      flag = True 
    if data['DEMA-Short'][i] < data['DEMA-Long'][i] and flag == True: # if DEMA short is less than DEMA long than add a Sell Signal 
      buy_list.append(np.nan)
      sell_list.append(data['Close'][i])
      flag = False 
    else: # if both if statements are False then add nothing to both signals 
      buy_list.append(np.nan)
      sell_list.append(np.nan)
    
  data['Buy'] = buy_list # return both signals to the dataset 
  data['Sell'] = sell_list

DEMA_function(OGI) # add the function to the dataset

plt.figure(figsize=(20,7)) # figure size 
plt.scatter(OGI.index, OGI['Buy'], color='green', label='Buy Signal', marker='^', alpha=1) # plot Buy signals
plt.scatter(OGI.index, OGI['Sell'], color='red', label='Sell Signal', marker='v', alpha=1) # plot Sell signals 
plt.plot(OGI['Close'], label='Close Price', alpha=0.5) # plot Close price line
plt.plot(OGI['DEMA-Short'], label='DEMA Short', alpha=0.5) # plot DEMA short price line
plt.plot(OGI['DEMA-Long'], label='DEMA Long', alpha=0.5) # plot DEMA long price line 
plt.xticks(rotation=45) 
plt.title('OrganiGram Close Price Buy and Sell Signals') # title 
plt.xlabel('Date') # x label 
plt.ylabel('Price ($)') # y label 
plt.show() # show graph